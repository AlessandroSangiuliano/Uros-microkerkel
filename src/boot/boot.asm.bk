org 0x7c00 ;invece di settarlo a 0x7c00 lo facci iniziare dall'indirizzo 0 perch√® non tutti i BIOS settano 0x7c00 come indirizzo di inizio standard
bits 16

CODE_SEG equ gdt_code - gdt_start
DATA_SEG equ gdt_data - gdt_start

_start:
    jmp short start
    nop

times 33 db 0 ;vado a riempire la parte di code che il bios potrebbe sovrascrivere.
start:
    jmp 0:step2 ; settando l'indirizzo prima di start, obbloghiamo il; resgistro CS a diventare 0x07c
step2:
    cli ; disabilito le interrupt per settare i registri segmenti a 0x7c00
    mov ax, 0x00
    mov ds, ax
    mov es, ax
    mov ss, ax
    mov sp, 0x7c00
    sti ; riabilito le interrupt. se non di fa tutto qullo sopra, il BIOS potrebbe settare i registri in altri modi che non permetterebbero il boot

.load_protected:
    cli
    lgdt[gdt_descriptor]
    mov eax, cr0
    or eax, 0x1
    mov cr0, eax
    jmp CODE_SEG:load32


gdt_start:
gdt_null:
    dd 0x0
    dd 0x0

; 0x8 offset
gdt_code:
    dw 0xffff
    dw 0
    db 0
    db 0x9A
    db 11001111b
    db 0

; 0x10
gdt_data:
    dw 0xffff
    dw 0
    db 0
    db 0x92
    db 11001111b
    db 0

gdt_end:

gdt_descriptor:
    dw gdt_end - gdt_start-1
    dd gdt_start

[BITS 32]
load32:
    mov eax, 1
    mov ecx, 100
    mov edi, 0x0100000
    call ata_lba_read
    jmp CODE_SEG:0x0100000

ata_lba_read:
    mov ebx, eax ; Backup the LBA
    ; send the highest 8 bits to the lba disck controller (ata)
    shr eax, 24
    mov dx, 0x1F6 ;ata port
    out dx, al
    ; finished sending.

    ; send all the sect ors to be read

    mov eax, ecx,
    mov dx, 0x1F2
    out dx, al
    ; end of the total sneding.

    ; restore some registers and sends more bits
    mov eax, ebx
    mov dx, 0x1F3
    out dx, al
    ; finished

    ; sends other bits to LBS
    mov dx, 0x1F4
    mov eax, ebx
    shr eax, 8
    out dx, al
    ; finished

    ; send the upper 16 bits
    mov dx, 0x1F5
    mov eax, ebx
    shr eax, 16
    out dx, al
    ; finished

    mov dx, 0x1F7
    mov al, 0x20
    out dx, al

    ; read all sectors
.next_sector:
    push ecx
.try_again:
    mov dx, 0x1F7
    in al, dx
    test al, 8
    jz .try_again

; we need to read 256 words at time
    mov ecx, 256
    mov dx, 0x1F0
    rep insw
    pop ecx
    loop .next_sector
    ; end of sectors reading
    ret

times 510-($-$$) db 0
dw 0xAA55